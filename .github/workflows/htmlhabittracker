<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8">
  <title>习惯追踪器 - 原UI + Streak & 完成率</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- 引入 React、ReactDOM、Babel（CDN） -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>

  <style>
    /* ======== 以下保持与您之前的UI相同，若有需要可自行微调 ======== */
    * {
      margin: 0; padding: 0; box-sizing: border-box;
    }
    body {
      background: #f5f5f5;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }
    .container {
      width: 80%;
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    .top-bar {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      align-items: center;
      flex-wrap: wrap;
    }
    .create-habit-form {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      align-items: center;
    }
    .create-habit-form input,
    .create-habit-form select {
      padding: 6px 10px;
      border-radius: 4px;
      border: 1px solid #ddd;
      font-size: 14px;
    }
    .create-habit-button {
      padding: 6px 12px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    /* 星期复选框改成正方形 */
    .days-of-week-selector {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
      align-items: center;
    }
    .days-of-week-selector label {
      display: flex;
      align-items: center;
      font-size: 14px;
      cursor: pointer;
      user-select: none;
    }
    .days-of-week-selector input[type="checkbox"] {
      width: 16px;
      height: 16px;
      border-radius: 0; 
      border: 2px solid #2196F3;
      margin-right: 4px;
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    .days-of-week-selector input[type="checkbox"]:checked {
      background-color: #2196F3;
      border-color: #2196F3;
    }

    .habit-card {
      background: white;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .habit-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    .delete-button {
      padding: 4px 8px;
      background: #ff4444;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }
    .calendar {
      width: 100%;
    }
    .scroll-container {
      position: relative;
      margin-bottom: 10px;
    }
    .big-box {
      overflow-x: auto;
      white-space: nowrap;
      scrollbar-width: none; /* Firefox */
      -ms-overflow-style: none; /* IE/Edge */
    }
    .big-box::-webkit-scrollbar {
      display: none; /* 隐藏滚动条 */
    }
    .month-row {
      display: block;
      white-space: nowrap;
      margin-bottom: 10px;
    }
    .month-label {
      display: inline-block;
      text-align: left;
      padding-left: 4px;
      color: #666;
      font-size: 14px;
      vertical-align: top;
    }
    .weekday-grid-row {
      display: block;
      white-space: nowrap;
    }
    .weekday-labels {
      display: inline-block;
      vertical-align: top;
      width: 40px;
      margin-right: 10px;
    }
    .weekday-labels > div {
      width: 40px;
      height: 14px;
      font-size: 10px;
      color: #666;
      display: flex;
      align-items: center;
      justify-content: center;
      text-transform: uppercase;
      margin-bottom: 2px;
    }
    .grid-container {
      display: inline-block;
      vertical-align: top;
    }
    .day-column {
      display: inline-flex;
      flex-direction: column;
      margin-right: 2px;
    }
    .day-column > button {
      margin-bottom: 2px;
    }
    .cell {
      width: 14px;
      height: 14px;
      background: #eee;
      border: none;
      cursor: pointer;
      border-radius: 2px;
      transition: all 0.2s;
      position: relative;
    }
    .cell:hover {
      transform: scale(1.2);
      z-index: 1;
    }
    .cell-tooltip {
      display: none;
      position: absolute;
      background: rgba(0,0,0,0.8);
      color: #fff;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      white-space: nowrap;
      top: -30px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 2;
    }
    .cell:hover .cell-tooltip {
      display: block;
    }
    .scroll-btn {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      width: 30px;
      height: 30px;
      background-color: rgba(0,0,0,0.1);
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: #333;
      z-index: 10;
    }
    .scroll-btn:hover {
      background-color: rgba(0,0,0,0.2);
    }
    .scroll-btn-left {
      left: 0;
    }
    .scroll-btn-right {
      right: 0;
    }
    .stats {
      margin-top: 20px;
      color: #666;
      font-size: 14px;
      display: flex;
      gap: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="root"></div>
  </div>

  <script type="text/babel">
    /* 
      1) 保持原先 UI + 逻辑
      2) 新增 统计函数 => getCompletionRateInDisplay, getLongestStreakInDisplay
         并在每次渲染 habit card 时计算 & 显示
    */

    const { useState, useEffect, useRef } = React;

    // ========== 工具函数：计算星期索引 & 打卡判断 ==========
    function dayIndexMondayFirst(date) {
      return (date.getDay() + 6) % 7;
    }
    function getDayOfWeekName(date){
      const idx=dayIndexMondayFirst(date);
      const dayNames=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
      return dayNames[idx];
    }

    // 判断某天是否打卡成功
    // - checkbox: true/false
    // - number: val>0 => 视为打卡
    function isDone(habit, dateKey){
      if(habit.type==="checkbox"){
        return habit.data[dateKey] === true;
      } else {
        const val=parseFloat(habit.data[dateKey]||0);
        return val>0;
      }
    }

    // 在当前显示范围 displayColumns 中，获取“应该打卡”的所有日期
    function getScheduledDatesInDisplay(habit, displayColumns){
      const result=[];
      displayColumns.forEach(col=>{
        col.forEach(date=>{
          const dayName=getDayOfWeekName(date);
          if(habit.daysOfWeek.includes(dayName)){
            const dateKey=`${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;
            result.push({ date, dateKey });
          }
        });
      });
      // 排序 => 用于计算连续天数
      result.sort((a,b)=> a.date - b.date);
      return result;
    }

    // 完成率 = (已完成天数 / 应打卡天数) * 100
    function getCompletionRateInDisplay(habit, displayColumns){
      const scheduled = getScheduledDatesInDisplay(habit, displayColumns);
      if(scheduled.length===0) return 0;
      let doneCount=0;
      for(const item of scheduled){
        if(isDone(habit, item.dateKey)) doneCount++;
      }
      return (doneCount / scheduled.length)*100;
    }

    // 最长连续打卡天数(基于“应打卡日”)
    // 遍历 scheduled，若 isDone => curStreak++；否则 curStreak=0
    // 取 maxStreak
    function getLongestStreakInDisplay(habit, displayColumns){
      const scheduled = getScheduledDatesInDisplay(habit, displayColumns);
      let maxStreak=0, curStreak=0;
      for(const item of scheduled){
        if(isDone(habit, item.dateKey)){
          curStreak++;
          if(curStreak>maxStreak) maxStreak=curStreak;
        } else {
          curStreak=0;
        }
      }
      return maxStreak;
    }

    // ========== 生成 2025-2028 所有周列 & 月份标签分配 ==========
    function generateColumnsFor4Years() {
      const startDate = new Date(2025, 0, 1);
      const endDate   = new Date(2028, 11, 31);

      const offsetStart = dayIndexMondayFirst(startDate);
      const calendarStart = new Date(startDate);
      calendarStart.setDate(startDate.getDate() - offsetStart);

      const offsetEnd = 6 - dayIndexMondayFirst(endDate);
      const calendarEnd = new Date(endDate);
      calendarEnd.setDate(endDate.getDate() + offsetEnd);

      const columns = [];
      const tempDate = new Date(calendarStart);
      while(tempDate <= calendarEnd) {
        const week = [];
        for(let i=0; i<7; i++){
          week.push(new Date(tempDate));
          tempDate.setDate(tempDate.getDate()+1);
        }
        columns.push(week);
      }
      return columns;
    }
    // 月份标签
    function getMonthLabelsFor4Years(){
      const labels=[];
      let year=2025, month=0;
      const monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
      while(year<=2028){
        labels.push({
          label: monthNames[month],
          year, month
        });
        month++;
        if(month===12){month=0; year++;}
        if(year>2028) break;
      }
      return labels;
    }
    function getMonthDistributionFor4Years(columns){
      const dist=Array(48).fill(0);
      columns.forEach(col=>{
        const firstDay=col[0];
        const y=firstDay.getFullYear();
        const m=firstDay.getMonth();
        const index=(y-2025)*12+m;
        if(index>=0 && index<48) dist[index]++;
      });
      return dist;
    }

    // ========== 过滤列(单年/All) ==========
    function filterColumnsByYear(columns, filterYear){
      if(filterYear==="All") return columns;
      const targetYear=parseInt(filterYear,10);
      if(isNaN(targetYear)) return columns;
      return columns.filter(week=> week.some(d=> d.getFullYear()===targetYear));
    }
    // 根据 filterYear 生成对应的 monthLabels & distribution
    function getFilteredMonthLabelsAndDist(filterYear, allColumns){
      if(filterYear==="All"){
        const labels=getMonthLabelsFor4Years();
        const dist=getMonthDistributionFor4Years(allColumns);
        return { labels, dist };
      } else {
        const y=parseInt(filterYear,10);
        const monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        const labels=[];
        for(let m=0;m<12;m++){
          labels.push({ year:y, month:m, label: monthNames[m] });
        }
        // 只统计当年
        const filtered=filterColumnsByYear(allColumns, filterYear);
        // 计算 distribution
        // => 需要最小/最大都= y
        const distArr=Array(12).fill(0);
        filtered.forEach(col=>{
          const firstDay=col[0];
          if(firstDay.getFullYear()===y){
            const mm=firstDay.getMonth();
            distArr[mm]++;
          }
        });
        return { labels, dist: distArr };
      }
    }

    // ========== 颜色映射 ==========
    const checkboxColorMap={
      Red:"#f44336", Yellow:"#FFC107", Blue:"#2196F3",
      Green:"#4CAF50", Purple:"#9C27B0", Cyan:"#00BCD4"
    };
    const colorHueMap={
      Red:0, Yellow:45, Blue:240, Green:120, Purple:280, Cyan:180
    };
    function getColorForValue(value,maxValue,hue){
      if(!value||value<=0||!maxValue) return "#eee";
      let ratio=value/maxValue;
      if(ratio>1) ratio=1;
      const lightness=95-ratio*50;
      const saturation=70;
      return `hsl(${hue},${saturation}%,${lightness}%)`;
    }

    function HabitTracker(){
      const [habits,setHabits]=useState([]);
      const [habitName,setHabitName]=useState("");
      const [habitType,setHabitType]=useState("checkbox");
      const [habitColor,setHabitColor]=useState("Red");

      const allWeekdays=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
      const [selectedDays,setSelectedDays]=useState(allWeekdays);

      const [columns,setColumns]=useState([]);
      const [monthLabels,setMonthLabels]=useState([]);
      const [monthDistribution,setMonthDistribution]=useState([]);

      // year filter
      const [filterYear,setFilterYear]=useState("All");
      const [displayColumns,setDisplayColumns]=useState([]); // 过滤后

      // refs for scrolling
      const bigBoxRefs=useRef({});

      useEffect(()=>{
        try{
          const saved=localStorage.getItem("habitsAdvanced");
          if(saved) setHabits(JSON.parse(saved));
        }catch(e){
          console.error("读取 habits 出错:",e);
        }
        // init
        const cols=generateColumnsFor4Years();
        setColumns(cols);
        const ml=getMonthLabelsFor4Years();
        setMonthLabels(ml);
        const dist=getMonthDistributionFor4Years(cols);
        setMonthDistribution(dist);
        setDisplayColumns(cols); // default => All
      },[]);

      useEffect(()=>{
        try{
          localStorage.setItem("habitsAdvanced",JSON.stringify(habits));
        }catch(e){
          console.error("保存 habits 出错:",e);
        }
      },[habits]);

      // 当 filterYear 改变 => 更新 displayColumns & monthLabels
      useEffect(()=>{
        const newCols=filterColumnsByYear(columns, filterYear);
        setDisplayColumns(newCols);
        const { labels, dist }=getFilteredMonthLabelsAndDist(filterYear, columns);
        setMonthLabels(labels);
        setMonthDistribution(dist);
      },[filterYear, columns]);

      // create habit
      const createHabit=(e)=>{
        e.preventDefault();
        if(!habitName.trim())return;
        const newHabit={
          id:Date.now(),
          name:habitName.trim(),
          type:habitType,
          color:habitColor,
          daysOfWeek:[...selectedDays],
          data:{}
        };
        setHabits([...habits,newHabit]);
        setHabitName("");
      };

      // toggle day
      const toggleDay=(day)=>{
        if(selectedDays.includes(day)){
          setSelectedDays(selectedDays.filter(d=>d!==day));
        }else{
          setSelectedDays([...selectedDays,day]);
        }
      };

      // 点击格子 => 修改 data
      const handleCellClick=(habit,date)=>{
        const dateKey=`${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;
        const dayName=getDayOfWeekName(date);
        if(!habit.daysOfWeek.includes(dayName))return;

        if(habit.type==="checkbox"){
          setHabits(habits.map(h=>{
            if(h.id===habit.id){
              return {...h,data:{...h.data,[dateKey]:!h.data[dateKey]}};
            }
            return h;
          }));
        } else {
          const oldVal=habit.data[dateKey]||0;
          const newValStr=prompt("请输入数值(空白则视为0)",oldVal);
          if(newValStr===null)return;
          const parsed=parseFloat(newValStr);
          const finalVal=isNaN(parsed)?0:parsed;
          setHabits(habits.map(h=>{
            if(h.id===habit.id){
              return {...h,data:{...h.data,[dateKey]:finalVal}};
            }
            return h;
          }));
        }
      };

      // get max value (for "number" type color scale)
      const getMaxValue=(habit)=>{
        if(habit.type!=="number")return 0;
        let maxVal=0;
        for(let key in habit.data){
          const val=parseFloat(habit.data[key])||0;
          if(val>maxVal) maxVal=val;
        }
        return maxVal;
      };

      // 渲染列
      const renderColumns=(habit)=>{
        const maxVal=getMaxValue(habit);
        const hue=colorHueMap[habit.color]||0;
        const fallbackColor=checkboxColorMap[habit.color]||"#eee";

        return displayColumns.map((weekDays,colIndex)=>(
          <div key={`col-${colIndex}`} className="day-column">
            {weekDays.map(date=>{
              const dateKey=`${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;
              const dayName=getDayOfWeekName(date);
              const isClickable=habit.daysOfWeek.includes(dayName);

              if(!isClickable){
                return (
                  <button key={dateKey} className="cell" style={{background:"#ddd",cursor:"not-allowed"}} disabled>
                    <span className="cell-tooltip">
                      {date.toLocaleDateString("zh-CN",{
                        year:"numeric",month:"long",day:"numeric",weekday:"long"
                      })}
                      (不在可执行范围)
                    </span>
                  </button>
                );
              }

              // 如果是checkbox => done => fallbackColor
              // 如果是number => color scale
              let cellColor="#eee";
              if(habit.type==="checkbox"){
                const checked=habit.data[dateKey]||false;
                if(checked) cellColor=fallbackColor;
              } else {
                const value=habit.data[dateKey]||0;
                cellColor=getColorForValue(value,maxVal,hue);
              }

              return (
                <button
                  key={dateKey}
                  className="cell"
                  style={{background:cellColor}}
                  onClick={()=>handleCellClick(habit,date)}
                >
                  <span className="cell-tooltip">
                    {date.toLocaleDateString("zh-CN",{
                      year:"numeric",month:"long",day:"numeric",weekday:"long"
                    })}
                  </span>
                </button>
              );
            })}
          </div>
        ));
      };

      // 左右滚动
      const scrollLeft=habitId=>{
        const ref=bigBoxRefs.current[habitId];
        if(ref && ref.current){
          ref.current.scrollBy({ left:-200, behavior:"smooth" });
        }
      };
      const scrollRight=habitId=>{
        const ref=bigBoxRefs.current[habitId];
        if(ref && ref.current){
          ref.current.scrollBy({ left:200, behavior:"smooth" });
        }
      };

      // ========== 在此处计算完成率 & Streak ==========

      return (
        <div>
          <div className="top-bar">
            <form className="create-habit-form" onSubmit={createHabit}>
              <input
                type="text"
                placeholder="Habit name"
                value={habitName}
                onChange={(e)=>setHabitName(e.target.value)}
              />
              <select value={habitType} onChange={(e)=>setHabitType(e.target.value)}>
                <option value="checkbox">Checkbox</option>
                <option value="number">Number</option>
              </select>
              <select value={habitColor} onChange={(e)=>setHabitColor(e.target.value)}>
                <option value="Red">Red</option>
                <option value="Yellow">Yellow</option>
                <option value="Blue">Blue</option>
                <option value="Green">Green</option>
                <option value="Purple">Purple</option>
                <option value="Cyan">Cyan</option>
              </select>

              <div className="days-of-week-selector">
                {["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map(day=>(
                  <label key={day}>
                    <input
                      type="checkbox"
                      checked={selectedDays.includes(day)}
                      onChange={()=>toggleDay(day)}
                    />
                    {day}
                  </label>
                ))}
              </div>

              <button type="submit" className="create-habit-button">
                Create Habit
              </button>
            </form>

            <div>
              <label style={{marginRight:"8px"}}>Filter by year: </label>
              <select value={filterYear} onChange={(e)=>setFilterYear(e.target.value)}>
                <option value="All">All</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
                <option value="2028">2028</option>
              </select>
            </div>
          </div>

          {habits.map(habit=>{
            // 如果没给这个 habit 分配滚动ref，就创建一个
            if(!bigBoxRefs.current[habit.id]){
              bigBoxRefs.current[habit.id]=React.createRef();
            }

            // 计算完成率 & streak
            const completionRate = getCompletionRateInDisplay(habit, displayColumns);
            const streak         = getLongestStreakInDisplay(habit, displayColumns);

            return (
              <div key={habit.id} className="habit-card">
                <div className="habit-header">
                  <h2 className="habit-title">
                    {habit.name} ({habit.type})
                  </h2>
                  <button
                    className="delete-button"
                    onClick={()=> setHabits(habits.filter(h=>h.id!==habit.id))}
                  >
                    删除
                  </button>
                </div>

                <div className="calendar">
                  <div className="scroll-container">
                    {filterYear==="All" && (
                      <button className="scroll-btn scroll-btn-left" onClick={()=>scrollLeft(habit.id)}>
                        &lt;
                      </button>
                    )}

                    <div className="big-box" ref={bigBoxRefs.current[habit.id]}>
                      {/* 第一行：月份标签 */}
                      <div className="month-row">
                        {monthLabels.map((mLabel,i)=>{
                          const colCount=monthDistribution[i]||0;
                          const labelWidth=colCount*16;
                          const finalWidth=labelWidth>0?labelWidth:40;
                          return (
                            <span
                              key={mLabel.label+"-"+i}
                              className="month-label"
                              style={{display:"inline-block",width:finalWidth}}
                            >
                              {mLabel.label}
                            </span>
                          );
                        })}
                      </div>

                      {/* 第二行：星期标签 + 日期网格 */}
                      <div className="weekday-grid-row">
                        <div className="weekday-labels">
                          {["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map(weekday=>(
                            <div key={weekday}>{weekday}</div>
                          ))}
                        </div>
                        <div className="grid-container">
                          {renderColumns(habit)}
                        </div>
                      </div>
                    </div>

                    {filterYear==="All" && (
                      <button className="scroll-btn scroll-btn-right" onClick={()=>scrollRight(habit.id)}>
                        &gt;
                      </button>
                    )}
                  </div>
                </div>

                {/* 在卡片底部显示实时统计 */}
                <div className="stats">
                  <span>Streak: {streak} days</span>
                  <span>完成率: {completionRate.toFixed(1)}%</span>
                </div>
              </div>
            );
          })}
        </div>
      );
    }

    const root=ReactDOM.createRoot(document.getElementById("root"));
    root.render(<HabitTracker/>);
  </script>
</body>
</html>
